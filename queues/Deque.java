import java.util.Iterator;
import java.util.NoSuchElementException;

import hello.HelloWorld;

public class Deque<Item> implements Iterable<Item> {
    private Node headPointer;
    private Node tailPointer;
    private int size;

    private class Node {
        private Item data;
        private Node next;
        private Node previous;

        public Node(Item data){
            this.data = data;
            this.next = null;
            this.previous = null;
        }

        public Item getData(){ return this.data; }
        public void setNext(Node next){ this.next = next; }
        public Node getNext(){ return this.next; }
        public void setPrevious(Node previous){ this.previous = previous; }
        public Node getPrevious(){ return this.previous; } 

    }

    // construct an empty deque
    public Deque(){
       this.headPointer = null;
       this.tailPointer = null;
       this.size = 0;
    }

    // is the deque empty?
    public boolean isEmpty(){
        return this.size == 0;
    }

    // return the number of items on the deque
    public int size(){
        return this.size;
    }

    // add the item to the front
    public void addFirst(Item item){
        if(item == null) throw new IllegalArgumentException("when adding a data, data cannot be null");
        Node newNode = new Node(item);
        if(isEmpty()){
            this.headPointer = newNode;
            this.tailPointer = newNode;
        }else{
            newNode.setNext(this.headPointer);
            newNode.setPrevious(null);
            this.headPointer.setPrevious(newNode);
            this.headPointer = newNode;
        }
        this.size++;
    }

    // add the item to the back
    public void addLast(Item item){
        if(item == null) throw new IllegalArgumentException("when adding a data, data cannot be null");
        Node newNode = new Node(item);
        if(isEmpty()){
            this.headPointer = newNode;
            this.tailPointer = newNode;
        }else{
            this.tailPointer.setNext(newNode);
            newNode.setPrevious(this.tailPointer);
            this.tailPointer = newNode;
        }
        this.size++;
    }

    // remove and return the item from the front
    public Item removeFirst(){
        if(isEmpty()) throw new NoSuchElementException("The deque is currently empty");
        Node currentNode = this.headPointer;
        this.headPointer = this.headPointer.getNext();
        if(this.headPointer == null){ // if deque is now empty
            this.tailPointer = null;
        }else{
            this.headPointer.setPrevious(null);
        }
        size--;
        return currentNode.getData();
    }

    // remove and return the item from the back
    public Item removeLast(){
        if(isEmpty()) throw new NoSuchElementException("The deque is currently empty");
        Node currentNode = this.tailPointer;
        this.tailPointer = currentNode.getPrevious();
        if(this.tailPointer == null){
            this.headPointer = null;
        }else {
            this.tailPointer.setNext(null);
        }
        size--;
        return currentNode.getData();
    }

    // return an iterator over items in order from front to back
    public Iterator<Item> iterator(){
        return new DequeIterator();
    }

    private class DequeIterator implements Iterator<Item> {
        private Node current = headPointer;

        @Override
        public boolean hasNext(){
            return current != null;
        }

        @Override
        public Item next(){
            if(!hasNext()) throw new NoSuchElementException("No more items");
            Item data = current.getData();
            current = current.getNext();
            return data;
        }

        @Override
        public void remove(){
            throw new UnsupportedOperationException("Remove function is not supported");
        }
    }
    
    // unit testing (required) : Generated by ChatGPT
    public static void main(String[] args){
        // Test 1: Create an empty deque
        Deque<String> deque_test = new Deque<>();
        System.out.println("Deque is empty: " + deque_test.isEmpty()); // Should be true
        System.out.println("Deque size: " + deque_test.size()); // Should be 0

        // Test 2: Add elements to the front
        deque_test.addFirst("Hello");
        deque_test.addFirst("World");
        System.out.println("Deque size after adding two elements to the front: " + deque_test.size()); // Should be 2
        System.out.println("Deque is empty: " + deque_test.isEmpty()); // Should be false

        // Test 3: Add element to the back
        deque_test.addLast("Java");
        System.out.println("Deque size after adding an element to the back: " + deque_test.size()); // Should be 3

        // Test 4: Iterate through deque
        System.out.println("Iterator output (front to back): ");
        for (String s : deque_test) {
            System.out.print(s + " -> "); // Expected output: World, Hello, Java
        }
        System.out.println();

        // Test 5: Remove from the front
        String removedFirst = deque_test.removeFirst();
        System.out.println("Removed from front: " + removedFirst); // Should be "World"
        
        for (String s : deque_test) {
            System.out.print(s + " -> "); // Expected output: World, Hello, Java
        }
        System.out.println();
        
        System.out.println("Deque size after removing from front: " + deque_test.size()); // Should be 2

        // Test 6: Remove from the back
        String removedLast = deque_test.removeLast();
        System.out.println("Removed from back: " + removedLast); // Should be "Java"
        
        for (String s : deque_test) {
            System.out.print(s + " -> "); // Expected output: World, Hello, Java
        }
        System.out.println();

        System.out.println("Deque size after removing from back: " + deque_test.size()); // Should be 1

        // Test 7: Final deque state
        System.out.println("Final deque size: " + deque_test.size()); // Should be 1
        System.out.println("Deque is empty: " + deque_test.isEmpty()); // Should be false
        System.out.println("Deque head: " + deque_test.removeFirst()); // Should be "Hello"
        System.out.println("Deque is empty: " + deque_test.isEmpty()); // Should be true

        // Test 8: Remove from an empty deque (should throw NoSuchElementException)
        try {
            deque_test.removeFirst(); // Should throw exception
        } catch (NoSuchElementException e) {
            System.out.println("Caught expected exception: " + e);
        }
    }
    
}
